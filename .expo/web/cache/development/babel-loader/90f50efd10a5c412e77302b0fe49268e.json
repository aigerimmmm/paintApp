{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { COLORS, SIZES } from \"../../constants\";\nimport data from \"../../data/QuizData\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { Alert } from \"../../components/Alert\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\n\nvar QuizAppScreen = function QuizAppScreen() {\n  var _allQuestions$current3;\n\n  var allQuestions = data;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentQuestionIndex = _useState2[0],\n      setCurrentQuestionIndex = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentOptionSelected = _useState4[0],\n      setCurrentOptionSelected = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      correctOption = _useState6[0],\n      setCorrectOption = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isOptionsDisabled = _useState8[0],\n      setIsOptionsDisabled = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      score = _useState10[0],\n      setScore = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      showNextButton = _useState12[0],\n      setShowNextButton = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      showScoreModal = _useState14[0],\n      setShowScoreModal = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      answered = _useState16[0],\n      setAnswered = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      answerCorrect = _useState18[0],\n      setAnswerCorrect = _useState18[1];\n\n  var validateAnswer = function validateAnswer(selectedOption) {\n    var correct_option = allQuestions[currentQuestionIndex]['correct_option'];\n    setCurrentOptionSelected(selectedOption);\n    setCorrectOption(correct_option);\n    setIsOptionsDisabled(true);\n\n    if (selectedOption == correct_option) {\n      setAnswered(true);\n      setAnswerCorrect(true);\n      setScore(score + 1);\n    } else {\n      setAnswerCorrect(true);\n      setAnswered(false);\n    }\n\n    setShowNextButton(true);\n  };\n\n  var handleNext = function handleNext() {\n    if (currentQuestionIndex == allQuestions.length - 1) {\n      console.log(\"Aika\");\n      setShowScoreModal(true);\n      setAnswerCorrect(false);\n    } else {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setCurrentOptionSelected(null);\n      setCorrectOption(null);\n      setIsOptionsDisabled(false);\n      setShowNextButton(false);\n      setAnswerCorrect(false);\n    }\n\n    Animated.timing(progress, {\n      toValue: currentQuestionIndex + 1,\n      duration: 1000,\n      useNativeDriver: false\n    }).start();\n  };\n\n  var restartQuiz = function restartQuiz() {\n    console.log(\"Asa\");\n    setShowScoreModal(false);\n    setCurrentQuestionIndex(0);\n    setScore(0);\n    setCurrentOptionSelected(null);\n    setCorrectOption(null);\n    setIsOptionsDisabled(false);\n    setShowNextButton(false);\n    Animated.timing(progress, {\n      toValue: 0,\n      duration: 1000,\n      useNativeDriver: false\n    }).start();\n  };\n\n  var renderQuestion = function renderQuestion() {\n    var _allQuestions$current;\n\n    return React.createElement(View, {\n      style: {\n        marginVertical: 40\n      }\n    }, React.createElement(View, {\n      style: {\n        flexDirection: 'row',\n        alignItems: 'flex-end'\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: COLORS.white,\n        fontSize: 20,\n        opacity: 0.6,\n        marginRight: 2\n      }\n    }, currentQuestionIndex + 1), React.createElement(Text, {\n      style: {\n        color: COLORS.white,\n        fontSize: 18,\n        opacity: 0.6\n      }\n    }, \"/ \", allQuestions.length)), React.createElement(Text, {\n      style: {\n        color: COLORS.white,\n        fontSize: 30\n      }\n    }, (_allQuestions$current = allQuestions[currentQuestionIndex]) == null ? void 0 : _allQuestions$current.question));\n  };\n\n  var renderOptions = function renderOptions() {\n    var _allQuestions$current2;\n\n    return React.createElement(View, null, (_allQuestions$current2 = allQuestions[currentQuestionIndex]) == null ? void 0 : _allQuestions$current2.options.map(function (option) {\n      return React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return validateAnswer(option);\n        },\n        disabled: isOptionsDisabled,\n        key: option,\n        style: {\n          borderWidth: 3,\n          height: 60,\n          borderRadius: 20,\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          paddingHorizontal: 20,\n          marginVertical: 10\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 20,\n          color: COLORS.white\n        }\n      }, option));\n    }));\n  };\n\n  var renderNextButton = function renderNextButton() {\n    if (showNextButton) {\n      return React.createElement(TouchableOpacity, {\n        onPress: handleNext,\n        style: {\n          marginTop: 50,\n          width: '100%',\n          backgroundColor: COLORS.accent,\n          padding: 20,\n          borderRadius: 5\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 20,\n          color: COLORS.white,\n          textAlign: 'center'\n        }\n      }, \"Next\"));\n    } else {\n      return null;\n    }\n  };\n\n  var onPressHome = function onPressHome() {\n    NavigationActions.navigate(\"Main\", {});\n  };\n\n  var _useState19 = useState(new Animated.Value(0)),\n      _useState20 = _slicedToArray(_useState19, 2),\n      progress = _useState20[0],\n      setProgress = _useState20[1];\n\n  var progressAnim = progress.interpolate({\n    inputRange: [0, allQuestions.length],\n    outputRange: ['0%', '100%']\n  });\n\n  var renderProgressBar = function renderProgressBar() {\n    return React.createElement(View, {\n      style: {\n        width: '100%',\n        height: 20,\n        borderRadius: 20,\n        backgroundColor: '#00000020'\n      }\n    }, React.createElement(Animated.View, {\n      style: [{\n        height: 20,\n        borderRadius: 20,\n        backgroundColor: COLORS.accent\n      }, {\n        width: progressAnim\n      }]\n    }));\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(ImageBackground, {\n    source: require(\"../../../../assets/wall.jpg\"),\n    style: {\n      flex: 1,\n      resizeMode: 'contain'\n    }\n  }, React.createElement(StatusBar, {\n    barStyle: \"light-content\",\n    backgroundColor: COLORS.primary\n  }), React.createElement(View, {\n    style: {\n      flex: 1,\n      paddingVertical: 40,\n      paddingHorizontal: 16,\n      position: 'relative'\n    }\n  }, renderProgressBar(), renderQuestion(), renderOptions(), renderNextButton(), React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: showScoreModal\n  }, React.createElement(ImageBackground, {\n    source: require(\"../../../../assets/wall.jpg\"),\n    style: {\n      flex: 1,\n      maxWidth: '100%'\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  }, React.createElement(View, {\n    style: {\n      width: '90%',\n      borderRadius: 20,\n      padding: 20,\n      alignItems: 'center'\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 30,\n      fontWeight: 'bold',\n      color: \"white\"\n    }\n  }, score > allQuestions.length / 2 ? 'CONGRATULATIONS!' : 'OOPS!'), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      marginVertical: 20\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 30,\n      color: score > allQuestions.length / 2 ? COLORS.success : COLORS.error\n    }\n  }, score), React.createElement(Text, {\n    style: {\n      fontSize: 30,\n      color: COLORS.white\n    }\n  }, \" / \", allQuestions.length)), React.createElement(TouchableOpacity, {\n    onPress: restartQuiz,\n    style: {\n      backgroundColor: COLORS.accent,\n      padding: 20,\n      width: '100%',\n      borderRadius: 20,\n      margin: 20\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: 'center',\n      color: COLORS.white,\n      fontSize: 20\n    }\n  }, \"Retry Quiz\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return onPressHome();\n    },\n    style: {\n      backgroundColor: COLORS.accent,\n      padding: 20,\n      width: '100%',\n      borderRadius: 20\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: 'center',\n      color: COLORS.white,\n      fontSize: 20\n    }\n  }, \"Go Home\")))))), React.createElement(Alert, {\n    correct: answered,\n    visible: answerCorrect,\n    answer: (_allQuestions$current3 = allQuestions[currentQuestionIndex]) == null ? void 0 : _allQuestions$current3.answer_path\n  }))));\n};\n\nexport default QuizAppScreen;","map":{"version":3,"names":["React","useState","COLORS","SIZES","data","MaterialCommunityIcons","Alert","TouchableOpacity","QuizAppScreen","allQuestions","currentQuestionIndex","setCurrentQuestionIndex","currentOptionSelected","setCurrentOptionSelected","correctOption","setCorrectOption","isOptionsDisabled","setIsOptionsDisabled","score","setScore","showNextButton","setShowNextButton","showScoreModal","setShowScoreModal","answered","setAnswered","answerCorrect","setAnswerCorrect","validateAnswer","selectedOption","correct_option","handleNext","length","console","log","Animated","timing","progress","toValue","duration","useNativeDriver","start","restartQuiz","renderQuestion","marginVertical","flexDirection","alignItems","color","white","fontSize","opacity","marginRight","question","renderOptions","options","map","option","borderWidth","height","borderRadius","justifyContent","paddingHorizontal","renderNextButton","marginTop","width","backgroundColor","accent","padding","textAlign","onPressHome","NavigationActions","navigate","Value","setProgress","progressAnim","interpolate","inputRange","outputRange","renderProgressBar","flex","require","resizeMode","primary","paddingVertical","position","maxWidth","fontWeight","success","error","margin","answer_path"],"sources":["C:/Users/mike/Desktop/ha/DrawingKid_Expo_20210705/app/src/screen/main/QuizAppScreen.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { View, Text, SafeAreaView, StatusBar, Image, Modal, Animated, Button } from 'react-native'\r\nimport { COLORS, SIZES } from '../../constants';\r\nimport data from '../../data/QuizData';\r\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport { Alert } from '../../components/Alert';\r\nimport {ImageBackground} from 'react-native';\r\nimport { TouchableOpacity} from 'react-native-gesture-handler'\r\n\r\n\r\nconst QuizAppScreen = () => {\r\n\r\n    const allQuestions = data;\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\r\n    const [currentOptionSelected, setCurrentOptionSelected] = useState(null);\r\n    const [correctOption, setCorrectOption] = useState(null);\r\n    const [isOptionsDisabled, setIsOptionsDisabled] = useState(false);\r\n    const [score, setScore] = useState(0)\r\n    const [showNextButton, setShowNextButton] = useState(false)\r\n    const [showScoreModal, setShowScoreModal] = useState(false)\r\n    const [answered, setAnswered] = useState(false)\r\n    const [answerCorrect, setAnswerCorrect] = useState(false)\r\n\r\n    \r\n\r\n\r\n    const validateAnswer = (selectedOption) => {\r\n        let correct_option = allQuestions[currentQuestionIndex]['correct_option'];\r\n        setCurrentOptionSelected(selectedOption);\r\n        setCorrectOption(correct_option);\r\n        setIsOptionsDisabled(true);\r\n       \r\n        if(selectedOption==correct_option){\r\n            setAnswered(true)\r\n            setAnswerCorrect(true)\r\n            // Set Score\r\n            setScore(score+1)\r\n        } else {\r\n            //console.log(\"Awa\")\r\n            setAnswerCorrect(true)\r\n            setAnswered(false)\r\n        }\r\n            //setAnswerCorrect(false)\r\n        \r\n        // Show Next Button\r\n        setShowNextButton(true)\r\n    }\r\n    const handleNext = () => {\r\n        if(currentQuestionIndex== allQuestions.length-1){\r\n            console.log(\"Aika\")\r\n\r\n            // Last Question\r\n            // Show Score Modal\r\n            setShowScoreModal(true)\r\n            setAnswerCorrect(false)\r\n           \r\n        }else{\r\n            setCurrentQuestionIndex(currentQuestionIndex+1);\r\n            setCurrentOptionSelected(null);\r\n            setCorrectOption(null);\r\n            setIsOptionsDisabled(false);\r\n            setShowNextButton(false);\r\n            setAnswerCorrect(false)\r\n            //setAnswered(false)\r\n        }\r\n        Animated.timing(progress, {\r\n            toValue: currentQuestionIndex+1,\r\n            duration: 1000,\r\n            useNativeDriver: false\r\n        }).start();\r\n    }\r\n\r\n\r\n\r\n\r\n    const restartQuiz = () => {\r\n        console.log(\"Asa\")\r\n        setShowScoreModal(false);\r\n\r\n        setCurrentQuestionIndex(0);\r\n        setScore(0);\r\n\r\n        setCurrentOptionSelected(null);\r\n        setCorrectOption(null);\r\n        setIsOptionsDisabled(false);\r\n        setShowNextButton(false);\r\n        Animated.timing(progress, {\r\n            toValue: 0,\r\n            duration: 1000,\r\n            useNativeDriver: false\r\n        }).start();\r\n    }\r\n\r\n\r\n\r\n    const renderQuestion = () => {\r\n        return (\r\n            <View style={{\r\n                marginVertical: 40\r\n            }}>\r\n                {/* Question Counter */}\r\n                <View style={{\r\n                    flexDirection: 'row',\r\n                    alignItems: 'flex-end'\r\n                }}>\r\n                    <Text style={{color: COLORS.white, fontSize: 20, opacity: 0.6, marginRight: 2}}>{currentQuestionIndex+1}</Text>\r\n                    <Text style={{color: COLORS.white, fontSize: 18, opacity: 0.6}}>/ {allQuestions.length}</Text>\r\n                </View>\r\n\r\n                {/* Question */}\r\n                <Text style={{\r\n                    color: COLORS.white,\r\n                    fontSize: 30\r\n                }}>{allQuestions[currentQuestionIndex]?.question}</Text>\r\n            </View>\r\n        )\r\n    }\r\n    const renderOptions = () => {\r\n        return (\r\n            <View>\r\n                {\r\n                    allQuestions[currentQuestionIndex]?.options.map(option => (\r\n                        <TouchableOpacity \r\n                        onPress={()=> validateAnswer(option)}\r\n                        disabled={isOptionsDisabled}\r\n                        key={option}\r\n                        style={{\r\n                            borderWidth: 3, \r\n                            height: 60, borderRadius: 20,\r\n                            flexDirection: 'row',\r\n                            alignItems: 'center', justifyContent: 'space-between',\r\n                            paddingHorizontal: 20,\r\n                            marginVertical: 10\r\n                        }}\r\n                        >\r\n                            <Text style={{fontSize: 20, color: COLORS.white}}>{option}</Text>\r\n\r\n                            {/* Show Check Or Cross Icon based on correct answer*/}\r\n                            \r\n\r\n                        </TouchableOpacity>\r\n                    ))\r\n                    \r\n                }\r\n                \r\n                \r\n            </View>\r\n            \r\n        )\r\n    }\r\n    const renderNextButton = () => {\r\n\r\n        if(showNextButton){\r\n            return (\r\n                <TouchableOpacity\r\n                onPress={handleNext}\r\n                style={{\r\n                    marginTop: 50, width: '100%', backgroundColor: COLORS.accent, padding: 20, borderRadius: 5\r\n                }}>\r\n                    <Text style={{fontSize: 20, color: COLORS.white, textAlign: 'center'}}>Next</Text>\r\n                </TouchableOpacity>\r\n            )\r\n        }else{\r\n\r\n            return null\r\n        }\r\n    }\r\n    const onPressHome = () => {\r\n        //const { navigation } = this.props;\r\n        NavigationActions.navigate(\"Main\", {\r\n          //studiedNumber: navigation.getParam(\"studiedNumber\"),\r\n          //studiedAlphabet: navigation.getParam(\"studiedAlphabet\")\r\n        });\r\n      };\r\n        \r\n    \r\n\r\n\r\n\r\n\r\n    const [progress, setProgress] = useState(new Animated.Value(0));\r\n    const progressAnim = progress.interpolate({\r\n        inputRange: [0, allQuestions.length],\r\n        outputRange: ['0%','100%']\r\n    })\r\n    const renderProgressBar = () => {\r\n        return (\r\n            <View style={{\r\n                width: '100%',\r\n                height: 20,\r\n                borderRadius: 20,\r\n                backgroundColor: '#00000020',\r\n\r\n            }}>\r\n                <Animated.View style={[{\r\n                    height: 20,\r\n                    borderRadius: 20,\r\n                    backgroundColor: COLORS.accent\r\n                },{\r\n                    width: progressAnim\r\n                }]}>\r\n\r\n                </Animated.View>\r\n\r\n            </View>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n       <SafeAreaView style={{\r\n           flex: 1,\r\n          // maxWidth: '100%'\r\n       }}>\r\n        <ImageBackground source={require('../../../../assets/wall.jpg')} style={{ flex: 1, resizeMode: 'contain'}}>\r\n\r\n           <StatusBar barStyle=\"light-content\" backgroundColor={COLORS.primary} />\r\n           <View style={{\r\n               flex: 1,\r\n               paddingVertical: 40,\r\n               paddingHorizontal: 16,\r\n               //backgroundColor: COLORS.background,\r\n               position:'relative'\r\n           }}>\r\n\r\n               {/* ProgressBar */}\r\n               { renderProgressBar() }\r\n\r\n               {/* Question */}\r\n               {renderQuestion()}\r\n\r\n               {/* Options */}\r\n               {renderOptions()}\r\n\r\n               {/* Next Button */}\r\n               {renderNextButton()}\r\n               \r\n\r\n               {/* Score Modal */}\r\n               <Modal\r\n               animationType=\"slide\"\r\n               transparent={true}\r\n               visible={showScoreModal}\r\n               >\r\n                    <ImageBackground source={require('../../../../assets/wall.jpg')} style={{ flex: 1,maxWidth: '100%',}}>\r\n                   <View style={{\r\n                       flex: 1,\r\n                       //backgroundColor: COLORS.primary,\r\n                       alignItems: 'center',\r\n                       justifyContent: 'center'\r\n                   }}>\r\n                       <View style={{\r\n                           //backgroundColor: COLORS.white,\r\n                           width: '90%',\r\n                           borderRadius: 20,\r\n                           padding: 20,\r\n                           alignItems: 'center'\r\n                       }}>\r\n                           <Text style={{fontSize: 30, fontWeight: 'bold', color: \"white\"}}>{ score> (allQuestions.length/2) ? 'CONGRATULATIONS!' : 'OOPS!' }</Text>\r\n\r\n                           <View style={{\r\n                               flexDirection: 'row',\r\n                               justifyContent: 'flex-start',\r\n                               alignItems: 'center',\r\n                               marginVertical: 20\r\n                           }}>\r\n                               <Text style={{\r\n                                   fontSize: 30,\r\n                                   color: score > (allQuestions.length/2) ? COLORS.success : COLORS.error\r\n                               }}>{score}</Text>\r\n                                <Text style={{\r\n                                    fontSize: 30, color: COLORS.white\r\n                                }}> / { allQuestions.length }</Text>\r\n                           </View>\r\n                           {/* Retry Quiz button */}\r\n                           \r\n                           <TouchableOpacity\r\n                           onPress={restartQuiz}\r\n                           style={{\r\n                               backgroundColor: COLORS.accent,\r\n                               padding: 20, width: '100%', borderRadius: 20, margin: 20\r\n                           }}>\r\n                               <Text style={{\r\n                                   textAlign: 'center', color: COLORS.white, fontSize: 20\r\n                               }}>Retry Quiz</Text>\r\n                           </TouchableOpacity>\r\n                           <TouchableOpacity\r\n                           onPress={() => onPressHome()}\r\n                           style={{\r\n                               backgroundColor: COLORS.accent,\r\n                               padding: 20, width: '100%', borderRadius: 20,\r\n                           }}>\r\n                               <Text style={{\r\n                                   textAlign: 'center', color: COLORS.white, fontSize: 20\r\n                               }}>Go Home</Text>\r\n                           </TouchableOpacity>\r\n\r\n                       </View>\r\n\r\n                   </View>\r\n                   </ImageBackground>\r\n               </Modal>\r\n\r\n               <Alert\r\n             correct={answered}\r\n             visible={answerCorrect}\r\n             answer={allQuestions[currentQuestionIndex]?.answer_path}\r\n               />    \r\n\r\n           </View>\r\n\r\n           </ImageBackground>\r\n       </SafeAreaView>\r\n    )\r\n}\r\n\r\nexport default QuizAppScreen\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}