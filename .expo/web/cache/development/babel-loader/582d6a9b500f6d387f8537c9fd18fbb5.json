{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SceneView } from '@react-navigation/core';\nimport DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\nimport { ScreenContainer } from 'react-native-screens';\nimport DrawerActions from \"../routers/DrawerActions\";\nimport DrawerSidebar from \"./DrawerSidebar\";\nimport DrawerGestureContext from \"../utils/DrawerGestureContext\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\n\nvar DrawerView = function (_React$PureComponent) {\n  _inherits(DrawerView, _React$PureComponent);\n\n  var _super = _createSuper(DrawerView);\n\n  function DrawerView() {\n    var _this;\n\n    _classCallCheck(this, DrawerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      loaded: [_this.props.navigation.state.index],\n      drawerWidth: typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth\n    };\n    _this.drawerGestureRef = React.createRef();\n\n    _this._handleDrawerStateChange = function (newState, willShow) {\n      if (newState === 'Idle') {\n        if (!_this.props.navigation.state.isDrawerIdle) {\n          _this.props.navigation.dispatch({\n            type: DrawerActions.MARK_DRAWER_IDLE,\n            key: _this.props.navigation.state.key\n          });\n        }\n      } else if (newState === 'Settling') {\n        _this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_SETTLING,\n          key: _this.props.navigation.state.key,\n          willShow: willShow\n        });\n      } else {\n        if (_this.props.navigation.state.isDrawerIdle) {\n          _this.props.navigation.dispatch({\n            type: DrawerActions.MARK_DRAWER_ACTIVE,\n            key: _this.props.navigation.state.key\n          });\n        }\n      }\n    };\n\n    _this._handleDrawerOpen = function () {\n      _this.props.navigation.dispatch({\n        type: DrawerActions.DRAWER_OPENED,\n        key: _this.props.navigation.state.key\n      });\n    };\n\n    _this._handleDrawerClose = function () {\n      _this.props.navigation.dispatch({\n        type: DrawerActions.DRAWER_CLOSED,\n        key: _this.props.navigation.state.key\n      });\n    };\n\n    _this._updateWidth = function () {\n      var drawerWidth = typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth;\n\n      if (_this.state.drawerWidth !== drawerWidth) {\n        _this.setState({\n          drawerWidth: drawerWidth\n        });\n      }\n    };\n\n    _this._renderNavigationView = function (drawerOpenProgress) {\n      return React.createElement(DrawerGestureContext.Provider, {\n        value: _this.drawerGestureRef\n      }, React.createElement(DrawerSidebar, _extends({\n        screenProps: _this.props.screenProps,\n        drawerOpenProgress: drawerOpenProgress,\n        navigation: _this.props.navigation,\n        descriptors: _this.props.descriptors,\n        contentComponent: _this.props.navigationConfig.contentComponent,\n        contentOptions: _this.props.navigationConfig.contentOptions,\n        drawerPosition: _this.props.navigationConfig.drawerPosition,\n        style: _this.props.navigationConfig.style\n      }, _this.props.navigationConfig)));\n    };\n\n    _this._renderContent = function () {\n      var _this$props = _this.props,\n          lazy = _this$props.lazy,\n          navigation = _this$props.navigation;\n      var loaded = _this.state.loaded;\n      var routes = navigation.state.routes;\n\n      if (_this.props.navigationConfig.unmountInactiveRoutes) {\n        var activeKey = navigation.state.routes[navigation.state.index].key;\n        var descriptor = _this.props.descriptors[activeKey];\n        return React.createElement(SceneView, {\n          navigation: descriptor.navigation,\n          screenProps: _this.props.screenProps,\n          component: descriptor.getComponent()\n        });\n      } else {\n        return React.createElement(ScreenContainer, {\n          style: styles.pages\n        }, routes.map(function (route, index) {\n          if (lazy && !loaded.includes(index)) {\n            return null;\n          }\n\n          var isFocused = navigation.state.index === index;\n          var descriptor = _this.props.descriptors[route.key];\n          return React.createElement(ResourceSavingScene, {\n            key: route.key,\n            style: [StyleSheet.absoluteFill, {\n              opacity: isFocused ? 1 : 0\n            }],\n            isVisible: isFocused\n          }, React.createElement(SceneView, {\n            navigation: descriptor.navigation,\n            screenProps: _this.props.screenProps,\n            component: descriptor.getComponent()\n          }));\n        }));\n      }\n    };\n\n    _this._setDrawerGestureRef = function (ref) {\n      _this.drawerGestureRef.current = ref;\n    };\n\n    return _this;\n  }\n\n  _createClass(DrawerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Dimensions.addEventListener('change', this._updateWidth);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      var _this$props$navigatio = this.props.navigation.state,\n          openId = _this$props$navigatio.openId,\n          closeId = _this$props$navigatio.closeId,\n          toggleId = _this$props$navigatio.toggleId,\n          isDrawerOpen = _this$props$navigatio.isDrawerOpen;\n      var _prevProps$navigation = prevProps.navigation.state,\n          prevOpenId = _prevProps$navigation.openId,\n          prevCloseId = _prevProps$navigation.closeId,\n          prevToggleId = _prevProps$navigation.toggleId;\n      var prevIds = [prevOpenId, prevCloseId, prevToggleId];\n      var changedIds = [openId, closeId, toggleId].filter(function (id) {\n        return !prevIds.includes(id);\n      }).sort(function (a, b) {\n        return a > b;\n      });\n      changedIds.forEach(function (id) {\n        if (id === openId) {\n          _this2._drawer.openDrawer();\n        } else if (id === closeId) {\n          _this2._drawer.closeDrawer();\n        } else if (id === toggleId) {\n          if (isDrawerOpen) {\n            _this2._drawer.closeDrawer();\n          } else {\n            _this2._drawer.openDrawer();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Dimensions.removeEventListener('change', this._updateWidth);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var navigation = this.props.navigation;\n      var activeKey = navigation.state.routes[navigation.state.index].key;\n      var drawerLockMode = this.props.descriptors[activeKey].options.drawerLockMode;\n      return React.createElement(DrawerLayout, {\n        ref: function ref(c) {\n          _this3._drawer = c;\n        },\n        onGestureRef: this._setDrawerGestureRef,\n        drawerLockMode: drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode,\n        drawerBackgroundColor: this.props.navigationConfig.drawerBackgroundColor,\n        keyboardDismissMode: this.props.navigationConfig.keyboardDismissMode,\n        drawerWidth: this.state.drawerWidth,\n        onDrawerOpen: this._handleDrawerOpen,\n        onDrawerClose: this._handleDrawerClose,\n        onDrawerStateChanged: this._handleDrawerStateChange,\n        useNativeAnimations: this.props.navigationConfig.useNativeAnimations,\n        renderNavigationView: this._renderNavigationView,\n        drawerPosition: this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left,\n        drawerType: this.props.navigationConfig.drawerType,\n        edgeWidth: this.props.navigationConfig.edgeWidth,\n        hideStatusBar: this.props.navigationConfig.hideStatusBar,\n        statusBarAnimation: this.props.navigationConfig.statusBarAnimation,\n        minSwipeDistance: this.props.navigationConfig.minSwipeDistance,\n        overlayColor: this.props.navigationConfig.overlayColor,\n        drawerContainerStyle: this.props.navigationConfig.drawerContainerStyle,\n        contentContainerStyle: this.props.navigationConfig.contentContainerStyle\n      }, React.createElement(DrawerGestureContext.Provider, {\n        value: this.drawerGestureRef\n      }, this._renderContent()));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n      };\n    }\n  }]);\n\n  return DrawerView;\n}(React.PureComponent);\n\nDrawerView.defaultProps = {\n  lazy: true\n};\nexport { DrawerView as default };\nvar styles = StyleSheet.create({\n  pages: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","SceneView","DrawerLayout","ScreenContainer","DrawerActions","DrawerSidebar","DrawerGestureContext","ResourceSavingScene","DrawerView","state","loaded","props","navigation","index","drawerWidth","navigationConfig","drawerGestureRef","createRef","_handleDrawerStateChange","newState","willShow","isDrawerIdle","dispatch","type","MARK_DRAWER_IDLE","key","MARK_DRAWER_SETTLING","MARK_DRAWER_ACTIVE","_handleDrawerOpen","DRAWER_OPENED","_handleDrawerClose","DRAWER_CLOSED","_updateWidth","setState","_renderNavigationView","drawerOpenProgress","screenProps","descriptors","contentComponent","contentOptions","drawerPosition","style","_renderContent","lazy","routes","unmountInactiveRoutes","activeKey","descriptor","getComponent","styles","pages","map","route","includes","isFocused","StyleSheet","absoluteFill","opacity","_setDrawerGestureRef","ref","current","Dimensions","addEventListener","prevProps","openId","closeId","toggleId","isDrawerOpen","prevOpenId","prevCloseId","prevToggleId","prevIds","changedIds","filter","id","sort","a","b","forEach","_drawer","openDrawer","closeDrawer","removeEventListener","drawerLockMode","options","c","drawerBackgroundColor","keyboardDismissMode","useNativeAnimations","positions","Right","Left","drawerType","edgeWidth","hideStatusBar","statusBarAnimation","minSwipeDistance","overlayColor","drawerContainerStyle","contentContainerStyle","nextProps","prevState","PureComponent","defaultProps","create","flex"],"sources":["C:/Users/mike/Desktop/ha/DrawingKid_Expo_20210705/node_modules/react-navigation-drawer/dist/views/DrawerView.js"],"sourcesContent":["import React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { SceneView } from '@react-navigation/core';\nimport DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent {\n  static defaultProps = {\n    lazy: true\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth: typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      openId,\n      closeId,\n      toggleId,\n      isDrawerOpen\n    } = this.props.navigation.state;\n    const {\n      openId: prevOpenId,\n      closeId: prevCloseId,\n      toggleId: prevToggleId\n    } = prevProps.navigation.state;\n\n    let prevIds = [prevOpenId, prevCloseId, prevToggleId];\n    let changedIds = [openId, closeId, toggleId].filter(id => !prevIds.includes(id)).sort((a, b) => a > b);\n\n    changedIds.forEach(id => {\n      if (id === openId) {\n        this._drawer.openDrawer();\n      } else if (id === closeId) {\n        this._drawer.closeDrawer();\n      } else if (id === toggleId) {\n        if (isDrawerOpen) {\n          this._drawer.closeDrawer();\n        } else {\n          this._drawer.openDrawer();\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n\n  drawerGestureRef = React.createRef();\n\n  _handleDrawerStateChange = (newState, willShow) => {\n    if (newState === 'Idle') {\n      if (!this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_IDLE,\n          key: this.props.navigation.state.key\n        });\n      }\n    } else if (newState === 'Settling') {\n      this.props.navigation.dispatch({\n        type: DrawerActions.MARK_DRAWER_SETTLING,\n        key: this.props.navigation.state.key,\n        willShow\n      });\n    } else {\n      if (this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_ACTIVE,\n          key: this.props.navigation.state.key\n        });\n      }\n    }\n  };\n\n  _handleDrawerOpen = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_OPENED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _handleDrawerClose = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_CLOSED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _updateWidth = () => {\n    const drawerWidth = typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  _renderNavigationView = drawerOpenProgress => {\n    return <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <DrawerSidebar screenProps={this.props.screenProps} drawerOpenProgress={drawerOpenProgress} navigation={this.props.navigation} descriptors={this.props.descriptors} contentComponent={this.props.navigationConfig.contentComponent} contentOptions={this.props.navigationConfig.contentOptions} drawerPosition={this.props.navigationConfig.drawerPosition} style={this.props.navigationConfig.style} {...this.props.navigationConfig} />\n      </DrawerGestureContext.Provider>;\n  };\n\n  _renderContent = () => {\n    let { lazy, navigation } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />;\n    } else {\n      return <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n          if (lazy && !loaded.includes(index)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          let isFocused = navigation.state.index === index;\n          let descriptor = this.props.descriptors[route.key];\n\n          return <ResourceSavingScene key={route.key} style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]} isVisible={isFocused}>\n                <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />\n              </ResourceSavingScene>;\n        })}\n        </ScreenContainer>;\n    }\n  };\n\n  _setDrawerGestureRef = ref => {\n    this.drawerGestureRef.current = ref;\n  };\n\n  render() {\n    const { navigation } = this.props;\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = this.props.descriptors[activeKey].options;\n\n    return <DrawerLayout ref={c => {\n      this._drawer = c;\n    }} onGestureRef={this._setDrawerGestureRef} drawerLockMode={drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode} drawerBackgroundColor={this.props.navigationConfig.drawerBackgroundColor} keyboardDismissMode={this.props.navigationConfig.keyboardDismissMode} drawerWidth={this.state.drawerWidth} onDrawerOpen={this._handleDrawerOpen} onDrawerClose={this._handleDrawerClose} onDrawerStateChanged={this._handleDrawerStateChange} useNativeAnimations={this.props.navigationConfig.useNativeAnimations} renderNavigationView={this._renderNavigationView} drawerPosition={this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left}\n    /* props specific to react-native-gesture-handler/DrawerLayout */\n    drawerType={this.props.navigationConfig.drawerType} edgeWidth={this.props.navigationConfig.edgeWidth} hideStatusBar={this.props.navigationConfig.hideStatusBar} statusBarAnimation={this.props.navigationConfig.statusBarAnimation} minSwipeDistance={this.props.navigationConfig.minSwipeDistance} overlayColor={this.props.navigationConfig.overlayColor} drawerContainerStyle={this.props.navigationConfig.drawerContainerStyle} contentContainerStyle={this.props.navigationConfig.contentContainerStyle}>\n        <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n          {this._renderContent()}\n        </DrawerGestureContext.Provider>\n      </DrawerLayout>;\n  }\n}\n\nconst styles = StyleSheet.create({\n  pages: {\n    flex: 1\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}