{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { AppContainer } from \"./src/router/AppRouter\";\nimport NavigationActions from \"./src/router/NavigationActions\";\nimport { inject, observer } from \"mobx-react\";\nimport { STATUS_BAR_HEIGHT } from \"./Constant\";\nimport * as Font from 'expo-font';\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      fontLoaded: false\n    };\n\n    _this.handleConnectivityChange = function _callee(isConnected) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (isConnected) {}\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.handleNavigationChange = function (prevState, newState) {\n      var currentScreen = getActiveRouteName(newState);\n      var prevScreen = getActiveRouteName(prevState);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                'expo-font': require(\"./res/assets/fonts/Helvetica-Bold.ttf\")\n              }));\n\n            case 2:\n              this.setState({\n                fontLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.fontLoaded) {\n        return React.createElement(View, {\n          style: {\n            flex: 1\n          }\n        }, React.createElement(View, {\n          style: styles.statusBar\n        }, React.createElement(StatusBar, {\n          translucent: true\n        })), React.createElement(AppContainer, {\n          ref: function ref(_ref) {\n            return NavigationActions.setTopLevelNavigator(_ref);\n          },\n          onNavigationStateChange: this.handleNavigationChange\n        }));\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  bottomBanner: {\n    position: \"absolute\",\n    bottom: 0\n  },\n  statusBar: {\n    height: STATUS_BAR_HEIGHT\n  }\n});\n\nvar getActiveRouteName = function getActiveRouteName(navigationState) {\n  if (!navigationState) {\n    return null;\n  }\n\n  var route = navigationState.routes[navigationState.index];\n\n  if (route.routes) {\n    return getActiveRouteName(route);\n  }\n\n  return route.routeName;\n};","map":{"version":3,"names":["React","Component","AppContainer","NavigationActions","inject","observer","STATUS_BAR_HEIGHT","Font","App","state","fontLoaded","handleConnectivityChange","isConnected","handleNavigationChange","prevState","newState","currentScreen","getActiveRouteName","prevScreen","loadAsync","require","setState","flex","styles","statusBar","ref","setTopLevelNavigator","StyleSheet","create","bottomBanner","position","bottom","height","navigationState","route","routes","index","routeName"],"sources":["C:/Users/mike/Desktop/ha/DrawingKid_Expo_20210705/app/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { StatusBar, StyleSheet, View } from 'react-native';\n//import LoadingView from \"./src/component/LoadingView\";\nimport { AppContainer } from \"./src/router/AppRouter\";\nimport NavigationActions from \"./src/router/NavigationActions\";\n// import {inject, observer} from \"mobx-react/native\";\nimport { inject, observer } from \"mobx-react\";\nimport { STATUS_BAR_HEIGHT } from \"./Constant\";\nimport * as Font from 'expo-font';\n\n\nexport default class App extends Component {\n  //custom state for loading font\n  state = {\n    fontLoaded: false,\n  };\n\n  async componentDidMount() {\n    //await font async loaded\n    await Font.loadAsync({\n      'expo-font': require('./res/assets/fonts/Helvetica-Bold.ttf'),\n    });\n    // Set state for font load\n    this.setState({ fontLoaded: true });\n    // NetInfo.isConnected.addEventListener('connectionChange', this.handleConnectivityChange)\n  }\n\n  componentWillUnmount() {\n    // NetInfo.isConnected.removeEventListener('connectionChange', this.handleConnectivityChange);\n  }\n\n  handleConnectivityChange = async (isConnected) => {\n    if (isConnected) {\n\n    }\n  };\n\n  render() {\n    // not render unless font loaded\n    if (this.state.fontLoaded) {\n      return (\n        <View style={{ flex: 1 }}>\n          <View style={styles.statusBar}>\n            <StatusBar\n              translucent={true}\n            />\n          </View>\n          <AppContainer ref={ref => NavigationActions.setTopLevelNavigator(ref)}\n            onNavigationStateChange={this.handleNavigationChange} />\n        </View>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  handleNavigationChange = (prevState, newState) => {\n    const currentScreen = getActiveRouteName(newState)\n    const prevScreen = getActiveRouteName(prevState)\n    //if (prevScreen !== currentScreen) {\n    //  this.props.navigationStore.onChangeNavigation(prevScreen, currentScreen)\n    //}\n  }\n}\n\nconst styles = StyleSheet.create({\n  bottomBanner: {\n    position: \"absolute\",\n    bottom: 0\n  },\n  statusBar: {\n    height: STATUS_BAR_HEIGHT,\n  }\n});\n\nconst getActiveRouteName = (navigationState) => {\n  if (!navigationState) {\n    return null;\n  }\n  const route = navigationState.routes[navigationState.index];\n  // dive into nested navigators\n  if (route.routes) {\n    return getActiveRouteName(route);\n  }\n  return route.routeName;\n}\n"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAGA,SAASC,YAAT;AACA,OAAOC,iBAAP;AAEA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC;AACA,SAASC,iBAAT;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;;IAGqBC,G;;;;;;;;;;;;;;;UAEnBC,K,GAAQ;MACNC,UAAU,EAAE;IADN,C;;UAkBRC,wB,GAA2B,iBAAOC,WAAP;MAAA;QAAA;UAAA;YAAA;cACzB,IAAIA,WAAJ,EAAiB,CAEhB;;YAHwB;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,C;;UAyB3BC,sB,GAAyB,UAACC,SAAD,EAAYC,QAAZ,EAAyB;MAChD,IAAMC,aAAa,GAAGC,kBAAkB,CAACF,QAAD,CAAxC;MACA,IAAMG,UAAU,GAAGD,kBAAkB,CAACH,SAAD,CAArC;IAID,C;;;;;;;;;;;;;+CA3COP,IAAI,CAACY,SAAL,CAAe;gBACnB,aAAaC,OAAO;cADD,CAAf,C;;;cAIN,KAAKC,QAAL,CAAc;gBAAEX,UAAU,EAAE;cAAd,CAAd;;;;;;;;;;;2CAIqB,CAEtB;;;6BAQQ;MAEP,IAAI,KAAKD,KAAL,CAAWC,UAAf,EAA2B;QACzB,OACE,oBAAC,IAAD;UAAM,KAAK,EAAE;YAAEY,IAAI,EAAE;UAAR;QAAb,GACE,oBAAC,IAAD;UAAM,KAAK,EAAEC,MAAM,CAACC;QAApB,GACE,oBAAC,SAAD;UACE,WAAW,EAAE;QADf,EADF,CADF,EAME,oBAAC,YAAD;UAAc,GAAG,EAAE,aAAAC,IAAG;YAAA,OAAItB,iBAAiB,CAACuB,oBAAlB,CAAuCD,IAAvC,CAAJ;UAAA,CAAtB;UACE,uBAAuB,EAAE,KAAKZ;QADhC,EANF,CADF;MAWD,CAZD,MAYO;QACL,OAAO,IAAP;MACD;IACF;;;;EA3C8BZ,S;;SAAZO,G;AAsDrB,IAAMe,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;EAC/BC,YAAY,EAAE;IACZC,QAAQ,EAAE,UADE;IAEZC,MAAM,EAAE;EAFI,CADiB;EAK/BP,SAAS,EAAE;IACTQ,MAAM,EAAE1B;EADC;AALoB,CAAlB,CAAf;;AAUA,IAAMW,kBAAkB,GAAG,SAArBA,kBAAqB,CAACgB,eAAD,EAAqB;EAC9C,IAAI,CAACA,eAAL,EAAsB;IACpB,OAAO,IAAP;EACD;;EACD,IAAMC,KAAK,GAAGD,eAAe,CAACE,MAAhB,CAAuBF,eAAe,CAACG,KAAvC,CAAd;;EAEA,IAAIF,KAAK,CAACC,MAAV,EAAkB;IAChB,OAAOlB,kBAAkB,CAACiB,KAAD,CAAzB;EACD;;EACD,OAAOA,KAAK,CAACG,SAAb;AACD,CAVD"},"metadata":{},"sourceType":"module"}