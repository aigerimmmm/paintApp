{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport invariant from \"../utils/invariant\";\nimport NavigationScenesReducer from \"./ScenesReducer\";\nvar DefaultTransitionSpec = {\n  duration: 250,\n  easing: Easing.inOut(Easing.ease),\n  timing: Animated.timing\n};\n\nvar Transitioner = function (_React$Component) {\n  _inherits(Transitioner, _React$Component);\n\n  var _super = _createSuper(Transitioner);\n\n  function Transitioner(_props, context) {\n    var _this;\n\n    _classCallCheck(this, Transitioner);\n\n    _this = _super.call(this, _props, context);\n\n    _this._computeScenes = function (props, nextProps) {\n      var nextScenes = NavigationScenesReducer(_this.state.scenes, nextProps.navigation.state, props.navigation.state, nextProps.descriptors);\n\n      if (!nextProps.navigation.state.isTransitioning) {\n        nextScenes = filterStale(nextScenes);\n      }\n\n      if (nextProps.screenProps !== _this.props.screenProps) {\n        _this.setState({\n          nextScenes: nextScenes\n        });\n      }\n\n      if (nextScenes === _this.state.scenes) {\n        return;\n      }\n\n      return nextScenes;\n    };\n\n    _this._onLayout = function (event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n          height = _event$nativeEvent$la.height,\n          width = _event$nativeEvent$la.width;\n\n      if (_this.state.layout.initWidth === width && _this.state.layout.initHeight === height) {\n        return;\n      }\n\n      var layout = _objectSpread(_objectSpread({}, _this.state.layout), {}, {\n        initHeight: height,\n        initWidth: width,\n        isMeasured: true\n      });\n\n      layout.height.setValue(height);\n      layout.width.setValue(width);\n\n      var nextState = _objectSpread(_objectSpread({}, _this.state), {}, {\n        layout: layout\n      });\n\n      _this._transitionProps = buildTransitionProps(_this.props, nextState);\n\n      _this.setState(nextState);\n    };\n\n    _this._onTransitionEnd = function () {\n      if (!_this._isMounted) {\n        return;\n      }\n\n      var prevTransitionProps = _this._prevTransitionProps;\n      _this._prevTransitionProps = null;\n      var scenes = filterStale(_this.state.scenes);\n\n      var nextState = _objectSpread(_objectSpread({}, _this.state), {}, {\n        scenes: scenes\n      });\n\n      _this._transitionProps = buildTransitionProps(_this.props, nextState);\n\n      _this.setState(nextState, function _callee() {\n        var result, prevProps;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!_this.props.onTransitionEnd) {\n                  _context.next = 5;\n                  break;\n                }\n\n                result = _this.props.onTransitionEnd(_this._transitionProps, prevTransitionProps);\n\n                if (!(result instanceof Promise)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 5;\n                return _regeneratorRuntime.awrap(result);\n\n              case 5:\n                if (_this._queuedTransition) {\n                  prevProps = _this._queuedTransition.prevProps;\n                  _this._queuedTransition = null;\n\n                  _this._startTransition(prevProps, _this.props);\n                } else {\n                  _this._isTransitionRunning = false;\n                }\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n    };\n\n    var _layout = {\n      height: new Animated.Value(0),\n      initHeight: 0,\n      initWidth: 0,\n      isMeasured: false,\n      width: new Animated.Value(0)\n    };\n    var position = new Animated.Value(_this.props.navigation.state.index);\n    _this._positionListener = position.addListener(function () {});\n    _this.state = {\n      layout: _layout,\n      position: position,\n      scenes: NavigationScenesReducer([], _this.props.navigation.state, null, _this.props.descriptors)\n    };\n    _this._prevTransitionProps = null;\n    _this._transitionProps = buildTransitionProps(_props, _this.state);\n    _this._isMounted = false;\n    _this._isTransitionRunning = false;\n    _this._queuedTransition = null;\n    return _this;\n  }\n\n  _createClass(Transitioner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n      this._positionListener && this.state.position.removeListener(this._positionListener);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (this._isTransitionRunning) {\n        if (!this._queuedTransition) {\n          this._queuedTransition = {\n            prevProps: this.props\n          };\n        }\n\n        return;\n      }\n\n      this._startTransition(this.props, nextProps);\n    }\n  }, {\n    key: \"_startTransition\",\n    value: function _startTransition(props, nextProps) {\n      var _this2 = this;\n\n      var indexHasChanged = props.navigation.state.index !== nextProps.navigation.state.index;\n\n      var nextScenes = this._computeScenes(props, nextProps);\n\n      if (!nextScenes) {\n        this._prevTransitionProps = this._transitionProps;\n        this.state.position.setValue(props.navigation.state.index);\n\n        this._onTransitionEnd();\n\n        return;\n      }\n\n      var nextState = _objectSpread(_objectSpread({}, this.state), {}, {\n        scenes: nextScenes\n      });\n\n      var position = nextState.position;\n      var toValue = nextProps.navigation.state.index;\n      this._prevTransitionProps = this._transitionProps;\n      this._transitionProps = buildTransitionProps(nextProps, nextState);\n      var isTransitioning = this._transitionProps.navigation.state.isTransitioning;\n\n      if (!isTransitioning || !indexHasChanged) {\n        this.setState(nextState, function _callee2() {\n          var result;\n          return _regeneratorRuntime.async(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!nextProps.onTransitionStart) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  result = nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);\n\n                  if (!(result instanceof Promise)) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  _context2.next = 5;\n                  return _regeneratorRuntime.awrap(result);\n\n                case 5:\n                  indexHasChanged && position.setValue(toValue);\n\n                  _this2._onTransitionEnd();\n\n                case 7:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        });\n      } else if (isTransitioning) {\n        this._isTransitionRunning = true;\n        this.setState(nextState, function _callee3() {\n          var result, transitionUserSpec, transitionSpec, timing, positionHasChanged;\n          return _regeneratorRuntime.async(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (!nextProps.onTransitionStart) {\n                    _context3.next = 5;\n                    break;\n                  }\n\n                  result = nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);\n\n                  if (!(result instanceof Promise)) {\n                    _context3.next = 5;\n                    break;\n                  }\n\n                  _context3.next = 5;\n                  return _regeneratorRuntime.awrap(result);\n\n                case 5:\n                  transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(_this2._transitionProps, _this2._prevTransitionProps) : null;\n                  transitionSpec = _objectSpread(_objectSpread({}, DefaultTransitionSpec), transitionUserSpec);\n                  timing = transitionSpec.timing;\n                  delete transitionSpec.timing;\n                  positionHasChanged = position.__getValue() !== toValue;\n\n                  if (indexHasChanged && positionHasChanged) {\n                    timing(position, _objectSpread(_objectSpread({}, transitionSpec), {}, {\n                      toValue: nextProps.navigation.state.index\n                    })).start(function () {\n                      requestAnimationFrame(_this2._onTransitionEnd);\n                    });\n                  } else {\n                    _this2._onTransitionEnd();\n                  }\n\n                case 11:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        onLayout: this._onLayout,\n        style: styles.main\n      }, this.props.render(this._transitionProps, this._prevTransitionProps));\n    }\n  }]);\n\n  return Transitioner;\n}(React.Component);\n\nfunction buildTransitionProps(props, state) {\n  var navigation = props.navigation,\n      options = props.options;\n  var layout = state.layout,\n      position = state.position,\n      scenes = state.scenes;\n  var scene = scenes.find(isSceneActive);\n  invariant(scene, 'Could not find active scene');\n  return {\n    layout: layout,\n    navigation: navigation,\n    position: position,\n    scenes: scenes,\n    scene: scene,\n    options: options,\n    index: scene.index\n  };\n}\n\nfunction isSceneNotStale(scene) {\n  return !scene.isStale;\n}\n\nfunction filterStale(scenes) {\n  var filtered = scenes.filter(isSceneNotStale);\n\n  if (filtered.length === scenes.length) {\n    return scenes;\n  }\n\n  return filtered;\n}\n\nfunction isSceneActive(scene) {\n  return scene.isActive;\n}\n\nvar styles = StyleSheet.create({\n  main: {\n    flex: 1\n  }\n});\nexport default Transitioner;","map":{"version":3,"names":["React","invariant","NavigationScenesReducer","DefaultTransitionSpec","duration","easing","Easing","inOut","ease","timing","Animated","Transitioner","props","context","_computeScenes","nextProps","nextScenes","state","scenes","navigation","descriptors","isTransitioning","filterStale","screenProps","setState","_onLayout","event","nativeEvent","layout","height","width","initWidth","initHeight","isMeasured","setValue","nextState","_transitionProps","buildTransitionProps","_onTransitionEnd","_isMounted","prevTransitionProps","_prevTransitionProps","onTransitionEnd","result","Promise","_queuedTransition","prevProps","_startTransition","_isTransitionRunning","Value","position","index","_positionListener","addListener","removeListener","indexHasChanged","toValue","onTransitionStart","transitionUserSpec","configureTransition","transitionSpec","positionHasChanged","__getValue","start","requestAnimationFrame","styles","main","render","Component","options","scene","find","isSceneActive","isSceneNotStale","isStale","filtered","filter","length","isActive","StyleSheet","create","flex"],"sources":["C:/Users/mike/Desktop/ha/DrawingKid_Expo_20210705/node_modules/react-navigation-stack/src/views/Transitioner.js"],"sourcesContent":["import React from 'react';\nimport { Animated, Easing, StyleSheet, View } from 'react-native';\nimport invariant from '../utils/invariant';\n\nimport NavigationScenesReducer from './ScenesReducer';\n\n// Used for all animations unless overriden\nconst DefaultTransitionSpec = {\n  duration: 250,\n  easing: Easing.inOut(Easing.ease),\n  timing: Animated.timing,\n};\n\nclass Transitioner extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    // The initial layout isn't measured. Measured layout will be only available\n    // when the component is mounted.\n    const layout = {\n      height: new Animated.Value(0),\n      initHeight: 0,\n      initWidth: 0,\n      isMeasured: false,\n      width: new Animated.Value(0),\n    };\n\n    const position = new Animated.Value(this.props.navigation.state.index);\n    this._positionListener = position.addListener((/* { value } */) => {\n      // This should work until we detach position from a view! so we have to be\n      // careful to not ever detach it, thus the gymnastics in _getPosition in\n      // StackViewLayout\n      // This should log each frame when releasing the gesture or when pressing\n      // the back button! If not, something has gone wrong with the animated\n      // value subscription\n      // console.log(value);\n    });\n\n    this.state = {\n      layout,\n      position,\n      scenes: NavigationScenesReducer(\n        [],\n        this.props.navigation.state,\n        null,\n        this.props.descriptors\n      ),\n    };\n\n    this._prevTransitionProps = null;\n    this._transitionProps = buildTransitionProps(props, this.state);\n\n    this._isMounted = false;\n    this._isTransitionRunning = false;\n    this._queuedTransition = null;\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    this._positionListener &&\n      this.state.position.removeListener(this._positionListener);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this._isTransitionRunning) {\n      if (!this._queuedTransition) {\n        this._queuedTransition = { prevProps: this.props };\n      }\n      return;\n    }\n\n    this._startTransition(this.props, nextProps);\n  }\n\n  _computeScenes = (props, nextProps) => {\n    let nextScenes = NavigationScenesReducer(\n      this.state.scenes,\n      nextProps.navigation.state,\n      props.navigation.state,\n      nextProps.descriptors\n    );\n\n    if (!nextProps.navigation.state.isTransitioning) {\n      nextScenes = filterStale(nextScenes);\n    }\n\n    // Update nextScenes when we change screenProps\n    // This is a workaround for https://github.com/react-navigation/react-navigation/issues/4271\n    if (nextProps.screenProps !== this.props.screenProps) {\n      this.setState({ nextScenes });\n    }\n\n    if (nextScenes === this.state.scenes) {\n      return;\n    }\n\n    return nextScenes;\n  };\n\n  _startTransition(props, nextProps) {\n    const indexHasChanged =\n      props.navigation.state.index !== nextProps.navigation.state.index;\n    let nextScenes = this._computeScenes(props, nextProps);\n\n    if (!nextScenes) {\n      // prevTransitionProps are the same as transitionProps in this case\n      // because nothing changed\n      this._prevTransitionProps = this._transitionProps;\n\n      // Unsure if this is actually a good idea... Also related to\n      // https://github.com/react-navigation/react-navigation/issues/5247\n      // - the animation is interrupted before completion so this ensures\n      // that it is properly set to the final position before firing\n      // onTransitionEnd\n      this.state.position.setValue(props.navigation.state.index);\n\n      this._onTransitionEnd();\n      return;\n    }\n\n    const nextState = {\n      ...this.state,\n      scenes: nextScenes,\n    };\n\n    // grab the position animated value\n    const { position } = nextState;\n\n    // determine where we are meant to transition to\n    const toValue = nextProps.navigation.state.index;\n\n    // compute transitionProps\n    this._prevTransitionProps = this._transitionProps;\n    this._transitionProps = buildTransitionProps(nextProps, nextState);\n    let { isTransitioning } = this._transitionProps.navigation.state;\n\n    // if the state isn't transitioning that is meant to signal that we should\n    // transition immediately to the new index. if the index hasn't changed, do\n    // the same thing here. it's not clear to me why we ever start a transition\n    // when the index hasn't changed, this requires further investigation.\n    if (!isTransitioning || !indexHasChanged) {\n      this.setState(nextState, async () => {\n        if (nextProps.onTransitionStart) {\n          const result = nextProps.onTransitionStart(\n            this._transitionProps,\n            this._prevTransitionProps\n          );\n          if (result instanceof Promise) {\n            // why do we bother awaiting the result here?\n            await result;\n          }\n        }\n        // jump immediately to the new value\n        indexHasChanged && position.setValue(toValue);\n        // end the transition\n        this._onTransitionEnd();\n      });\n    } else if (isTransitioning) {\n      this._isTransitionRunning = true;\n      this.setState(nextState, async () => {\n        if (nextProps.onTransitionStart) {\n          const result = nextProps.onTransitionStart(\n            this._transitionProps,\n            this._prevTransitionProps\n          );\n\n          // Wait for the onTransitionStart to resolve if needed.\n          if (result instanceof Promise) {\n            await result;\n          }\n        }\n\n        // get the transition spec.\n        const transitionUserSpec = nextProps.configureTransition\n          ? nextProps.configureTransition(\n              this._transitionProps,\n              this._prevTransitionProps\n            )\n          : null;\n\n        const transitionSpec = {\n          ...DefaultTransitionSpec,\n          ...transitionUserSpec,\n        };\n\n        const { timing } = transitionSpec;\n        delete transitionSpec.timing;\n\n        // if swiped back, indexHasChanged == true && positionHasChanged == false\n        const positionHasChanged = position.__getValue() !== toValue;\n        if (indexHasChanged && positionHasChanged) {\n          timing(position, {\n            ...transitionSpec,\n            toValue: nextProps.navigation.state.index,\n          }).start(() => {\n            // In case the animation is immediately interrupted for some reason,\n            // we move this to the next frame so that onTransitionStart can fire\n            // first (https://github.com/react-navigation/react-navigation/issues/5247)\n            requestAnimationFrame(this._onTransitionEnd);\n          });\n        } else {\n          this._onTransitionEnd();\n        }\n      });\n    }\n  }\n\n  render() {\n    return (\n      <View onLayout={this._onLayout} style={styles.main}>\n        {this.props.render(this._transitionProps, this._prevTransitionProps)}\n      </View>\n    );\n  }\n\n  _onLayout = event => {\n    const { height, width } = event.nativeEvent.layout;\n    if (\n      this.state.layout.initWidth === width &&\n      this.state.layout.initHeight === height\n    ) {\n      return;\n    }\n    const layout = {\n      ...this.state.layout,\n      initHeight: height,\n      initWidth: width,\n      isMeasured: true,\n    };\n\n    layout.height.setValue(height);\n    layout.width.setValue(width);\n\n    const nextState = {\n      ...this.state,\n      layout,\n    };\n\n    this._transitionProps = buildTransitionProps(this.props, nextState);\n    this.setState(nextState);\n  };\n\n  _onTransitionEnd = () => {\n    if (!this._isMounted) {\n      return;\n    }\n    const prevTransitionProps = this._prevTransitionProps;\n    this._prevTransitionProps = null;\n\n    const scenes = filterStale(this.state.scenes);\n\n    const nextState = {\n      ...this.state,\n      scenes,\n    };\n\n    this._transitionProps = buildTransitionProps(this.props, nextState);\n\n    this.setState(nextState, async () => {\n      if (this.props.onTransitionEnd) {\n        const result = this.props.onTransitionEnd(\n          this._transitionProps,\n          prevTransitionProps\n        );\n\n        if (result instanceof Promise) {\n          await result;\n        }\n      }\n\n      if (this._queuedTransition) {\n        let { prevProps } = this._queuedTransition;\n        this._queuedTransition = null;\n        this._startTransition(prevProps, this.props);\n      } else {\n        this._isTransitionRunning = false;\n      }\n    });\n  };\n}\n\nfunction buildTransitionProps(props, state) {\n  const { navigation, options } = props;\n\n  const { layout, position, scenes } = state;\n\n  const scene = scenes.find(isSceneActive);\n\n  invariant(scene, 'Could not find active scene');\n\n  return {\n    layout,\n    navigation,\n    position,\n    scenes,\n    scene,\n    options,\n    index: scene.index,\n  };\n}\n\nfunction isSceneNotStale(scene) {\n  return !scene.isStale;\n}\n\nfunction filterStale(scenes) {\n  const filtered = scenes.filter(isSceneNotStale);\n  if (filtered.length === scenes.length) {\n    return scenes;\n  }\n  return filtered;\n}\n\nfunction isSceneActive(scene) {\n  return scene.isActive;\n}\n\nconst styles = StyleSheet.create({\n  main: {\n    flex: 1,\n  },\n});\n\nexport default Transitioner;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}