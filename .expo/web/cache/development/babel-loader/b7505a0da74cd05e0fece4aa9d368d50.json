{"ast":null,"code":"import * as Localization from 'expo-localization';\nimport i18n from 'i18n-js';\nimport ja from \"../../../res/string/ja.json\";\nimport en from \"../../../res/string/en.json\";\ni18n.fallbacks = false;\ni18n.translations = {\n  ja: ja,\n  en: en\n};\nexport function strings(name) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return i18n.t(name, params);\n}\nexport var getLocale = function getLocale(language) {\n  if (language.includes('ja')) {\n    return 'ja';\n  }\n\n  return 'en';\n};\nexport default i18n;","map":{"version":3,"names":["Localization","i18n","ja","en","fallbacks","translations","strings","name","params","t","getLocale","language","includes"],"sources":["C:/Users/mike/Desktop/ha/DrawingKid_Expo_20210705/app/src/config/i18n/i18n.js"],"sourcesContent":["import * as Localization from 'expo-localization';\nimport i18n from 'i18n-js';\nimport ja from '../../../res/string/ja.json';\nimport en from '../../../res/string/en.json';\n\ni18n.fallbacks = false;\ni18n.translations = { ja, en };\n// i18n.locale = \"en\"; // Localization.locale;\n\n// The method we'll use instead of a regular string\nexport function strings(name, params = {}) {\n  return i18n.t(name, params);\n}\n\nexport const getLocale = (language) => {\n  if (language.includes('ja')) {\n    return 'ja'\n  }\n  return 'en'\n}\n\nexport default i18n;\n"],"mappings":"AAAA,OAAO,KAAKA,YAAZ,MAA8B,mBAA9B;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,EAAP;AACA,OAAOC,EAAP;AAEAF,IAAI,CAACG,SAAL,GAAiB,KAAjB;AACAH,IAAI,CAACI,YAAL,GAAoB;EAAEH,EAAE,EAAFA,EAAF;EAAMC,EAAE,EAAFA;AAAN,CAApB;AAIA,OAAO,SAASG,OAAT,CAAiBC,IAAjB,EAAoC;EAAA,IAAbC,MAAa,uEAAJ,EAAI;EACzC,OAAOP,IAAI,CAACQ,CAAL,CAAOF,IAAP,EAAaC,MAAb,CAAP;AACD;AAED,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD,EAAc;EACrC,IAAIA,QAAQ,CAACC,QAAT,CAAkB,IAAlB,CAAJ,EAA6B;IAC3B,OAAO,IAAP;EACD;;EACD,OAAO,IAAP;AACD,CALM;AAOP,eAAeX,IAAf"},"metadata":{},"sourceType":"module"}