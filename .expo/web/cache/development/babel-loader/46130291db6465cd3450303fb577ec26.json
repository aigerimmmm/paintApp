{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Hammer from '@egjs/hammerjs';\nimport { MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD, MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD } from \"./constants\";\nimport DraggingGestureHandler from \"./DraggingGestureHandler\";\nimport { isValidNumber, isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from \"./utils\";\nimport { State } from \"../State\";\n\nvar PanGestureHandler = function (_DraggingGestureHandl) {\n  _inherits(PanGestureHandler, _DraggingGestureHandl);\n\n  var _super = _createSuper(PanGestureHandler);\n\n  function PanGestureHandler() {\n    _classCallCheck(this, PanGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PanGestureHandler, [{\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(PanGestureHandler.prototype), \"getHammerConfig\", this).call(this)), {}, {\n        direction: this.getDirection()\n      });\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      var nextState = _get(_getPrototypeOf(PanGestureHandler.prototype), \"getState\", this).call(this, type);\n\n      if (this.previousState === State.UNDETERMINED && nextState === State.ACTIVE) {\n        return State.BEGAN;\n      }\n\n      return nextState;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var config = this.getConfig();\n      var activeOffsetXStart = config.activeOffsetXStart,\n          activeOffsetXEnd = config.activeOffsetXEnd,\n          activeOffsetYStart = config.activeOffsetYStart,\n          activeOffsetYEnd = config.activeOffsetYEnd,\n          minDist = config.minDist;\n      var directions = [];\n      var horizontalDirections = [];\n\n      if (!isnan(minDist)) {\n        return Hammer.DIRECTION_ALL;\n      }\n\n      if (!isnan(activeOffsetXStart)) horizontalDirections.push(Hammer.DIRECTION_LEFT);\n      if (!isnan(activeOffsetXEnd)) horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n      if (horizontalDirections.length === 2) horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n      directions = directions.concat(horizontalDirections);\n      var verticalDirections = [];\n      if (!isnan(activeOffsetYStart)) verticalDirections.push(Hammer.DIRECTION_UP);\n      if (!isnan(activeOffsetYEnd)) verticalDirections.push(Hammer.DIRECTION_DOWN);\n      if (verticalDirections.length === 2) verticalDirections = [Hammer.DIRECTION_VERTICAL];\n      directions = directions.concat(verticalDirections);\n\n      if (!directions.length) {\n        return Hammer.DIRECTION_NONE;\n      }\n\n      if (directions[0] === Hammer.DIRECTION_HORIZONTAL && directions[1] === Hammer.DIRECTION_VERTICAL) {\n        return Hammer.DIRECTION_ALL;\n      }\n\n      if (horizontalDirections.length && verticalDirections.length) {\n        return Hammer.DIRECTION_ALL;\n      }\n\n      return directions[0];\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      if (!this.hasCustomActivationCriteria) {\n        return {\n          minDistSq: 10\n        };\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"shouldFailUnderCustomCriteria\",\n    value: function shouldFailUnderCustomCriteria(_ref, criteria) {\n      var deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY;\n      return !isnan(criteria.failOffsetXStart) && deltaX < criteria.failOffsetXStart || !isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd || !isnan(criteria.failOffsetYStart) && deltaY < criteria.failOffsetYStart || !isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd;\n    }\n  }, {\n    key: \"shouldActivateUnderCustomCriteria\",\n    value: function shouldActivateUnderCustomCriteria(_ref2, criteria) {\n      var deltaX = _ref2.deltaX,\n          deltaY = _ref2.deltaY,\n          velocity = _ref2.velocity;\n      return !isnan(criteria.activeOffsetXStart) && deltaX < criteria.activeOffsetXStart || !isnan(criteria.activeOffsetXEnd) && deltaX > criteria.activeOffsetXEnd || !isnan(criteria.activeOffsetYStart) && deltaY < criteria.activeOffsetYStart || !isnan(criteria.activeOffsetYEnd) && deltaY > criteria.activeOffsetYEnd || TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n        x: deltaX,\n        y: deltaY\n      }), criteria.minDistSq) || TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) || TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) || TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq);\n    }\n  }, {\n    key: \"shouldMultiFingerPanFail\",\n    value: function shouldMultiFingerPanFail(_ref3) {\n      var pointerLength = _ref3.pointerLength,\n          scale = _ref3.scale,\n          deltaRotation = _ref3.deltaRotation;\n\n      if (pointerLength <= 1) {\n        return false;\n      }\n\n      var deltaScale = Math.abs(scale - 1);\n      var absDeltaRotation = Math.abs(deltaRotation);\n\n      if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n        return true;\n      }\n\n      if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(criteria) {\n      return isValidNumber(criteria.minDistSq) || isValidNumber(criteria.minVelocityX) || isValidNumber(criteria.minVelocityY) || isValidNumber(criteria.minVelocitySq) || isValidNumber(criteria.activeOffsetXStart) || isValidNumber(criteria.activeOffsetXEnd) || isValidNumber(criteria.activeOffsetYStart) || isValidNumber(criteria.activeOffsetYEnd);\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(props, _recognizer, inputData) {\n      if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n        return {\n          failed: true\n        };\n      }\n\n      var velocity = {\n        x: inputData.velocityX,\n        y: inputData.velocityY\n      };\n\n      if (this.hasCustomActivationCriteria && this.shouldActivateUnderCustomCriteria({\n        deltaX: inputData.deltaX,\n        deltaY: inputData.deltaY,\n        velocity: velocity\n      }, props)) {\n        if (this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation\n        })) {\n          return {\n            failed: true\n          };\n        }\n\n        return {\n          success: true\n        };\n      }\n\n      return {\n        success: false\n      };\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'pan';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Pan;\n    }\n  }]);\n\n  return PanGestureHandler;\n}(DraggingGestureHandler);\n\nexport default PanGestureHandler;","map":{"version":3,"sources":["PanGestureHandler.ts"],"names":["Hammer","direction","nextState","State","config","minDist","directions","horizontalDirections","isnan","verticalDirections","minDistSq","deltaY","criteria","deltaX","velocity","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","x","y","deltaRotation","pointerLength","deltaScale","Math","scale","absDeltaRotation","isValidNumber","failed","inputData","velocityY","success"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport {\n  EventMap,\n  MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD,\n  MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD,\n} from './constants';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isValidNumber, isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\nimport { State } from '../State';\n\nimport { Config, HammerInputExt } from './GestureHandler';\nclass PanGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'pan';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Pan;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      direction: this.getDirection(),\n    };\n  }\n\n  getState(type: keyof typeof EventMap) {\n    const nextState = super.getState(type);\n    // Ensure that the first state sent is `BEGAN` and not `ACTIVE`\n    if (\n      this.previousState === State.UNDETERMINED &&\n      nextState === State.ACTIVE\n    ) {\n      return State.BEGAN;\n    }\n    return nextState;\n  }\n\n  getDirection() {\n    const config = this.getConfig();\n    const {\n      activeOffsetXStart,\n      activeOffsetXEnd,\n      activeOffsetYStart,\n      activeOffsetYEnd,\n      minDist,\n    } = config;\n    let directions: number[] = [];\n    let horizontalDirections = [];\n\n    if (!isnan(minDist)) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    if (!isnan(activeOffsetXStart))\n      horizontalDirections.push(Hammer.DIRECTION_LEFT);\n    if (!isnan(activeOffsetXEnd))\n      horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n    if (horizontalDirections.length === 2)\n      horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n\n    directions = directions.concat(horizontalDirections);\n    let verticalDirections = [];\n\n    if (!isnan(activeOffsetYStart))\n      verticalDirections.push(Hammer.DIRECTION_UP);\n    if (!isnan(activeOffsetYEnd))\n      verticalDirections.push(Hammer.DIRECTION_DOWN);\n\n    if (verticalDirections.length === 2)\n      verticalDirections = [Hammer.DIRECTION_VERTICAL];\n\n    directions = directions.concat(verticalDirections);\n\n    if (!directions.length) {\n      return Hammer.DIRECTION_NONE;\n    }\n    if (\n      directions[0] === Hammer.DIRECTION_HORIZONTAL &&\n      directions[1] === Hammer.DIRECTION_VERTICAL\n    ) {\n      return Hammer.DIRECTION_ALL;\n    }\n    if (horizontalDirections.length && verticalDirections.length) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    return directions[0];\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        minDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { deltaX, deltaY }: HammerInputExt,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.failOffsetXStart) &&\n        deltaX < criteria.failOffsetXStart) ||\n      (!isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd) ||\n      (!isnan(criteria.failOffsetYStart) &&\n        deltaY < criteria.failOffsetYStart) ||\n      (!isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd)\n    );\n  }\n\n  shouldActivateUnderCustomCriteria(\n    { deltaX, deltaY, velocity }: any,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.activeOffsetXStart) &&\n        deltaX < criteria.activeOffsetXStart) ||\n      (!isnan(criteria.activeOffsetXEnd) &&\n        deltaX > criteria.activeOffsetXEnd) ||\n      (!isnan(criteria.activeOffsetYStart) &&\n        deltaY < criteria.activeOffsetYStart) ||\n      (!isnan(criteria.activeOffsetYEnd) &&\n        deltaY > criteria.activeOffsetYEnd) ||\n      TEST_MIN_IF_NOT_NAN(\n        VEC_LEN_SQ({ x: deltaX, y: deltaY }),\n        criteria.minDistSq\n      ) ||\n      TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) ||\n      TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) ||\n      TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq)\n    );\n  }\n\n  shouldMultiFingerPanFail({\n    pointerLength,\n    scale,\n    deltaRotation,\n  }: {\n    deltaRotation: number;\n    pointerLength: number;\n    scale: number;\n  }) {\n    if (pointerLength <= 1) {\n      return false;\n    }\n\n    // Test if the pan had too much pinching or rotating.\n    const deltaScale = Math.abs(scale - 1);\n    const absDeltaRotation = Math.abs(deltaRotation);\n    if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n    if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n\n    return false;\n  }\n\n  updateHasCustomActivationCriteria(\n    criteria: Config & { minVelocityX?: number; minVelocityY?: number }\n  ) {\n    return (\n      isValidNumber(criteria.minDistSq) ||\n      isValidNumber(criteria.minVelocityX) ||\n      isValidNumber(criteria.minVelocityY) ||\n      isValidNumber(criteria.minVelocitySq) ||\n      isValidNumber(criteria.activeOffsetXStart) ||\n      isValidNumber(criteria.activeOffsetXEnd) ||\n      isValidNumber(criteria.activeOffsetYStart) ||\n      isValidNumber(criteria.activeOffsetYEnd)\n    );\n  }\n\n  isGestureEnabledForEvent(\n    props: any,\n    _recognizer: any,\n    inputData: HammerInputExt & { deltaRotation: number }\n  ) {\n    if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n      return { failed: true };\n    }\n\n    const velocity = { x: inputData.velocityX, y: inputData.velocityY };\n    if (\n      this.hasCustomActivationCriteria &&\n      this.shouldActivateUnderCustomCriteria(\n        { deltaX: inputData.deltaX, deltaY: inputData.deltaY, velocity },\n        props\n      )\n    ) {\n      if (\n        this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation,\n        })\n      ) {\n        return {\n          failed: true,\n        };\n      }\n      return { success: true };\n    }\n    return { success: false };\n  }\n}\n\nexport default PanGestureHandler;\n"]},"metadata":{},"sourceType":"module"}