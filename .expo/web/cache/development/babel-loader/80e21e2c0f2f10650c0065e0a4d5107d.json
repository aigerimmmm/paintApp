{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaView } from '@react-navigation/native';\nimport TouchableItem from \"./TouchableItem\";\n\nvar DrawerNavigatorItems = function DrawerNavigatorItems(_ref) {\n  var items = _ref.items,\n      activeItemKey = _ref.activeItemKey,\n      activeTintColor = _ref.activeTintColor,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      inactiveTintColor = _ref.inactiveTintColor,\n      inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n      getLabel = _ref.getLabel,\n      renderIcon = _ref.renderIcon,\n      onItemPress = _ref.onItemPress,\n      itemsContainerStyle = _ref.itemsContainerStyle,\n      itemStyle = _ref.itemStyle,\n      labelStyle = _ref.labelStyle,\n      activeLabelStyle = _ref.activeLabelStyle,\n      inactiveLabelStyle = _ref.inactiveLabelStyle,\n      iconContainerStyle = _ref.iconContainerStyle,\n      drawerPosition = _ref.drawerPosition;\n  return React.createElement(View, {\n    style: [styles.container, itemsContainerStyle]\n  }, items.map(function (route, index) {\n    var _ref2;\n\n    var focused = activeItemKey === route.key;\n    var color = focused ? activeTintColor : inactiveTintColor;\n    var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n    var scene = {\n      route: route,\n      index: index,\n      focused: focused,\n      tintColor: color\n    };\n    var icon = renderIcon(scene);\n    var label = getLabel(scene);\n    var accessibilityLabel = typeof label === 'string' ? label : undefined;\n    var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n    return React.createElement(TouchableItem, {\n      key: route.key,\n      accessible: true,\n      accessibilityLabel: accessibilityLabel,\n      onPress: function onPress() {\n        onItemPress({\n          route: route,\n          focused: focused\n        });\n      },\n      delayPressIn: 0\n    }, React.createElement(SafeAreaView, {\n      style: [{\n        backgroundColor: backgroundColor\n      }, styles.item, itemStyle],\n      forceInset: (_ref2 = {}, _defineProperty(_ref2, drawerPosition, 'always'), _defineProperty(_ref2, drawerPosition === 'left' ? 'right' : 'left', 'never'), _defineProperty(_ref2, \"vertical\", 'never'), _ref2)\n    }, icon ? React.createElement(View, {\n      style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle]\n    }, icon) : null, typeof label === 'string' ? React.createElement(Text, {\n      style: [styles.label, {\n        color: color\n      }, labelStyle, extraLabelStyle]\n    }, label) : label));\n  }));\n};\n\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent'\n};\nvar styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default DrawerNavigatorItems;","map":{"version":3,"names":["React","SafeAreaView","TouchableItem","DrawerNavigatorItems","items","activeItemKey","activeTintColor","activeBackgroundColor","inactiveTintColor","inactiveBackgroundColor","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","styles","container","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","accessibilityLabel","undefined","extraLabelStyle","item","inactiveIcon","defaultProps","StyleSheet","create","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"sources":["C:/Users/mike/Desktop/ha/DrawingKid_Expo_20210705/node_modules/react-navigation-drawer/dist/views/DrawerNavigatorItems.js"],"sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SafeAreaView } from '@react-navigation/native';\nimport TouchableItem from './TouchableItem';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nconst DrawerNavigatorItems = ({\n  items,\n  activeItemKey,\n  activeTintColor,\n  activeBackgroundColor,\n  inactiveTintColor,\n  inactiveBackgroundColor,\n  getLabel,\n  renderIcon,\n  onItemPress,\n  itemsContainerStyle,\n  itemStyle,\n  labelStyle,\n  activeLabelStyle,\n  inactiveLabelStyle,\n  iconContainerStyle,\n  drawerPosition\n}) => <View style={[styles.container, itemsContainerStyle]}>\n    {items.map((route, index) => {\n    const focused = activeItemKey === route.key;\n    const color = focused ? activeTintColor : inactiveTintColor;\n    const backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n    const scene = { route, index, focused, tintColor: color };\n    const icon = renderIcon(scene);\n    const label = getLabel(scene);\n    const accessibilityLabel = typeof label === 'string' ? label : undefined;\n    const extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n    return <TouchableItem key={route.key} accessible accessibilityLabel={accessibilityLabel} onPress={() => {\n      onItemPress({ route, focused });\n    }} delayPressIn={0}>\n          <SafeAreaView style={[{ backgroundColor }, styles.item, itemStyle]} forceInset={{\n        [drawerPosition]: 'always',\n        [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n        vertical: 'never'\n      }}>\n            {icon ? <View style={[styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle]}>\n                {icon}\n              </View> : null}\n            {typeof label === 'string' ? <Text style={[styles.label, { color }, labelStyle, extraLabelStyle]}>\n                {label}\n              </Text> : label}\n          </SafeAreaView>\n        </TouchableItem>;\n  })}\n  </View>;\n\n/* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent'\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\n\nexport default DrawerNavigatorItems;"],"mappings":"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"},"metadata":{},"sourceType":"module"}