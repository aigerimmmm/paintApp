{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { polyfill } from 'react-lifecycles-compat';\nimport { ScreenContainer } from 'react-native-screens';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport BottomTabBar from \"../views/BottomTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\n\nvar TabNavigationView = function (_React$PureComponent) {\n  _inherits(TabNavigationView, _React$PureComponent);\n\n  var _super = _createSuper(TabNavigationView);\n\n  function TabNavigationView() {\n    var _this;\n\n    _classCallCheck(this, TabNavigationView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      loaded: [_this.props.navigation.state.index]\n    };\n\n    _this._renderTabBar = function () {\n      var _this$props = _this.props,\n          _this$props$tabBarCom = _this$props.tabBarComponent,\n          TabBarComponent = _this$props$tabBarCom === void 0 ? BottomTabBar : _this$props$tabBarCom,\n          tabBarOptions = _this$props.tabBarOptions,\n          navigation = _this$props.navigation,\n          screenProps = _this$props.screenProps,\n          getLabelText = _this$props.getLabelText,\n          getAccessibilityLabel = _this$props.getAccessibilityLabel,\n          getButtonComponent = _this$props.getButtonComponent,\n          getAccessibilityRole = _this$props.getAccessibilityRole,\n          getAccessibilityStates = _this$props.getAccessibilityStates,\n          getTestID = _this$props.getTestID,\n          renderIcon = _this$props.renderIcon,\n          onTabPress = _this$props.onTabPress,\n          onTabLongPress = _this$props.onTabLongPress;\n      var descriptors = _this.props.descriptors;\n      var state = _this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarVisible === false) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, {\n        jumpTo: _this._jumpTo,\n        navigation: navigation,\n        screenProps: screenProps,\n        onTabPress: onTabPress,\n        onTabLongPress: onTabLongPress,\n        getLabelText: getLabelText,\n        getButtonComponent: getButtonComponent,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getAccessibilityRole: getAccessibilityRole,\n        getAccessibilityStates: getAccessibilityStates,\n        getTestID: getTestID,\n        renderIcon: renderIcon\n      }));\n    };\n\n    _this._jumpTo = function (key) {\n      var _this$props2 = _this.props,\n          navigation = _this$props2.navigation,\n          onIndexChange = _this$props2.onIndexChange;\n      var index = navigation.state.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n      onIndexChange(index);\n    };\n\n    return _this;\n  }\n\n  _createClass(TabNavigationView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          navigation = _this$props3.navigation,\n          renderScene = _this$props3.renderScene,\n          lazy = _this$props3.lazy;\n      var routes = navigation.state.routes;\n      var loaded = this.state.loaded;\n      return React.createElement(View, {\n        style: styles.container\n      }, React.createElement(ScreenContainer, {\n        style: styles.pages\n      }, routes.map(function (route, index) {\n        if (lazy && !loaded.includes(index)) {\n          return null;\n        }\n\n        var isFocused = navigation.state.index === index;\n        return React.createElement(ResourceSavingScene, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          isVisible: isFocused\n        }, renderScene({\n          route: route\n        }));\n      })), this._renderTabBar());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n      };\n    }\n  }]);\n\n  return TabNavigationView;\n}(React.PureComponent);\n\nTabNavigationView.defaultProps = {\n  lazy: true,\n  getAccessibilityRole: function getAccessibilityRole() {\n    return 'button';\n  },\n  getAccessibilityStates: function getAccessibilityStates(_ref) {\n    var focused = _ref.focused;\n    return focused ? ['selected'] : [];\n  }\n};\npolyfill(TabNavigationView);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\nexport default createTabNavigator(TabNavigationView);","map":{"version":3,"names":["React","polyfill","ScreenContainer","createTabNavigator","BottomTabBar","ResourceSavingScene","TabNavigationView","state","loaded","props","navigation","index","_renderTabBar","tabBarComponent","TabBarComponent","tabBarOptions","screenProps","getLabelText","getAccessibilityLabel","getButtonComponent","getAccessibilityRole","getAccessibilityStates","getTestID","renderIcon","onTabPress","onTabLongPress","descriptors","route","routes","descriptor","key","options","tabBarVisible","_jumpTo","onIndexChange","findIndex","renderScene","lazy","styles","container","pages","map","includes","isFocused","StyleSheet","absoluteFill","nextProps","prevState","PureComponent","defaultProps","focused","create","flex","overflow"],"sources":["C:/Users/mike/Desktop/ha/DrawingKid_Expo_20210705/node_modules/react-navigation-tabs/src/navigators/createBottomTabNavigator.js"],"sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\n\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\n\nimport createTabNavigator, {\n  type InjectedProps,\n} from '../utils/createTabNavigator';\nimport BottomTabBar, { type TabBarOptions } from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\ntype Props = InjectedProps & {\n  getAccessibilityRole: (props: { route: any }) => string,\n  getAccessibilityStates: (props: { route: any }) => Array<string>,\n  lazy?: boolean,\n  tabBarComponent?: React.ComponentType<*>,\n  tabBarOptions?: TabBarOptions,\n};\n\ntype State = {\n  loaded: number[],\n};\n\nclass TabNavigationView extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    lazy: true,\n    getAccessibilityRole: () => 'button',\n    getAccessibilityStates: ({ focused }) => (focused ? ['selected'] : []),\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      getAccessibilityLabel,\n      getButtonComponent,\n      getAccessibilityRole,\n      getAccessibilityStates,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        jumpTo={this._jumpTo}\n        navigation={navigation}\n        screenProps={screenProps}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n        getLabelText={getLabelText}\n        getButtonComponent={getButtonComponent}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getAccessibilityRole={getAccessibilityRole}\n        getAccessibilityStates={getAccessibilityStates}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n      />\n    );\n  };\n\n  _jumpTo = (key: string) => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(route => route.key === key);\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const { navigation, renderScene, lazy } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    return (\n      <View style={styles.container}>\n        <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            const isFocused = navigation.state.index === index;\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                isVisible={isFocused}\n              >\n                {renderScene({ route })}\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n        {this._renderTabBar()}\n      </View>\n    );\n  }\n}\n\npolyfill(TabNavigationView);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n});\n\nexport default createTabNavigator(TabNavigationView);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}