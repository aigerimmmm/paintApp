{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { polyfill } from 'react-lifecycles-compat';\nimport { TabView, PagerPan } from 'react-native-tab-view';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport MaterialTopTabBar from \"../views/MaterialTopTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\n\nvar MaterialTabView = function (_React$PureComponent) {\n  _inherits(MaterialTabView, _React$PureComponent);\n\n  var _super = _createSuper(MaterialTabView);\n\n  function MaterialTabView() {\n    var _this;\n\n    _classCallCheck(this, MaterialTabView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      index: 0,\n      isSwiping: false,\n      loaded: [_this.props.navigation.state.index],\n      transitioningFromIndex: null\n    };\n\n    _this._renderIcon = function (_ref) {\n      var focused = _ref.focused,\n          route = _ref.route,\n          tintColor = _ref.tintColor;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n          tintColor: tintColor,\n          focused: focused\n        }) : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _this._renderTabBar = function (props) {\n      var state = _this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;\n      var _this$props = _this.props,\n          _this$props$tabBarCom = _this$props.tabBarComponent,\n          TabBarComponent = _this$props$tabBarCom === void 0 ? MaterialTopTabBar : _this$props$tabBarCom,\n          tabBarPosition = _this$props.tabBarPosition,\n          tabBarOptions = _this$props.tabBarOptions;\n\n      if (TabBarComponent === null || !tabBarVisible) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, props, {\n        tabBarPosition: tabBarPosition,\n        screenProps: _this.props.screenProps,\n        navigation: _this.props.navigation,\n        getLabelText: _this.props.getLabelText,\n        getAccessibilityLabel: _this.props.getAccessibilityLabel,\n        getTestID: _this.props.getTestID,\n        renderIcon: _this._renderIcon,\n        onTabPress: _this.props.onTabPress,\n        onTabLongPress: _this.props.onTabLongPress\n      }));\n    };\n\n    _this._renderPanPager = function (props) {\n      return React.createElement(PagerPan, props);\n    };\n\n    _this._handleAnimationEnd = function () {\n      var lazy = _this.props.lazy;\n\n      if (lazy) {\n        _this.setState({\n          transitioningFromIndex: null,\n          isSwiping: false\n        });\n      }\n    };\n\n    _this._handleSwipeStart = function () {\n      var _this$props2 = _this.props,\n          navigation = _this$props2.navigation,\n          lazy = _this$props2.lazy;\n\n      if (lazy) {\n        _this.setState({\n          isSwiping: true,\n          loaded: _toConsumableArray(new Set([].concat(_toConsumableArray(_this.state.loaded), [Math.max(navigation.state.index - 1, 0), Math.min(navigation.state.index + 1, navigation.state.routes.length - 1)])))\n        });\n      }\n    };\n\n    _this._handleIndexChange = function (index) {\n      var _this$props3 = _this.props,\n          animationEnabled = _this$props3.animationEnabled,\n          navigation = _this$props3.navigation,\n          onIndexChange = _this$props3.onIndexChange,\n          lazy = _this$props3.lazy;\n\n      if (lazy && animationEnabled) {\n        _this.setState({\n          transitioningFromIndex: navigation.state.index || 0\n        });\n      }\n\n      onIndexChange(index);\n    };\n\n    _this._mustBeVisible = function (_ref2) {\n      var index = _ref2.index,\n          focused = _ref2.focused;\n      var _this$props4 = _this.props,\n          animationEnabled = _this$props4.animationEnabled,\n          navigation = _this$props4.navigation;\n      var _this$state = _this.state,\n          isSwiping = _this$state.isSwiping,\n          transitioningFromIndex = _this$state.transitioningFromIndex;\n\n      if (isSwiping) {\n        var isSibling = navigation.state.index === index - 1 || navigation.state.index === index + 1;\n\n        if (isSibling) {\n          return true;\n        }\n      }\n\n      if (animationEnabled && transitioningFromIndex === index) {\n        return true;\n      }\n\n      return focused;\n    };\n\n    _this._renderScene = function (_ref3) {\n      var route = _ref3.route;\n      var _this$props5 = _this.props,\n          renderScene = _this$props5.renderScene,\n          descriptors = _this$props5.descriptors,\n          lazy = _this$props5.lazy,\n          optimizationsEnabled = _this$props5.optimizationsEnabled;\n\n      if (lazy) {\n        var loaded = _this.state.loaded;\n        var routes = _this.props.navigation.state.routes;\n        var index = routes.findIndex(function (_ref4) {\n          var key = _ref4.key;\n          return key === route.key;\n        });\n        var navigation = descriptors[route.key].navigation;\n\n        var mustBeVisible = _this._mustBeVisible({\n          index: index,\n          focused: navigation.isFocused()\n        });\n\n        if (!loaded.includes(index) && !mustBeVisible) {\n          return React.createElement(View, null);\n        }\n\n        if (optimizationsEnabled) {\n          return React.createElement(ResourceSavingScene, {\n            isVisible: mustBeVisible\n          }, renderScene({\n            route: route\n          }));\n        }\n      }\n\n      return renderScene({\n        route: route\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(MaterialTabView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          navigation = _this$props6.navigation,\n          animationEnabled = _this$props6.animationEnabled,\n          renderScene = _this$props6.renderScene,\n          onIndexChange = _this$props6.onIndexChange,\n          rest = _objectWithoutProperties(_this$props6, [\"navigation\", \"animationEnabled\", \"renderScene\", \"onIndexChange\"]);\n\n      var renderPager = rest.renderPager;\n      var state = this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptors = this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      var swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;\n\n      if (typeof swipeEnabled === 'function') {\n        swipeEnabled = swipeEnabled(state);\n      }\n\n      if (animationEnabled === false && swipeEnabled === false) {\n        renderPager = this._renderPanPager;\n      }\n\n      return React.createElement(TabView, _extends({}, rest, {\n        navigationState: navigation.state,\n        animationEnabled: animationEnabled,\n        swipeEnabled: swipeEnabled,\n        onAnimationEnd: this._handleAnimationEnd,\n        onIndexChange: this._handleIndexChange,\n        onSwipeStart: this._handleSwipeStart,\n        renderPager: renderPager,\n        renderTabBar: this._renderTabBar,\n        renderScene: this._renderScene\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n\n      if (prevState.index === index) {\n        return null;\n      }\n\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index]),\n        index: index\n      };\n    }\n  }]);\n\n  return MaterialTabView;\n}(React.PureComponent);\n\nMaterialTabView.defaultProps = {\n  initialLayout: Platform.select({\n    android: {\n      width: 1,\n      height: 0\n    }\n  }),\n  animationEnabled: true,\n  lazy: false,\n  optimizationsEnabled: false\n};\npolyfill(MaterialTabView);\nexport default createTabNavigator(MaterialTabView);","map":{"version":3,"names":["React","polyfill","TabView","PagerPan","createTabNavigator","MaterialTopTabBar","ResourceSavingScene","MaterialTabView","state","index","isSwiping","loaded","props","navigation","transitioningFromIndex","_renderIcon","focused","route","tintColor","descriptors","descriptor","key","options","tabBarIcon","_renderTabBar","routes","tabBarVisible","tabBarComponent","TabBarComponent","tabBarPosition","tabBarOptions","screenProps","getLabelText","getAccessibilityLabel","getTestID","onTabPress","onTabLongPress","_renderPanPager","_handleAnimationEnd","lazy","setState","_handleSwipeStart","Set","Math","max","min","length","_handleIndexChange","animationEnabled","onIndexChange","_mustBeVisible","isSibling","_renderScene","renderScene","optimizationsEnabled","findIndex","mustBeVisible","isFocused","includes","rest","renderPager","swipeEnabled","nextProps","prevState","PureComponent","defaultProps","initialLayout","Platform","select","android","width","height"],"sources":["C:/Users/mike/Desktop/ha/DrawingKid_Expo_20210705/node_modules/react-navigation-tabs/src/navigators/createMaterialTopTabNavigator.js"],"sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { View, Platform } from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { TabView, PagerPan } from 'react-native-tab-view';\nimport createTabNavigator, {\n  type InjectedProps,\n} from '../utils/createTabNavigator';\nimport MaterialTopTabBar, {\n  type TabBarOptions,\n} from '../views/MaterialTopTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\ntype Props = InjectedProps & {\n  animationEnabled?: boolean,\n  lazy?: boolean,\n  optimizationsEnabled?: boolean,\n  swipeEnabled?: boolean,\n  renderPager?: (props: *) => React.Node,\n  tabBarComponent?: React.ComponentType<*>,\n  tabBarOptions?: TabBarOptions,\n  tabBarPosition?: 'top' | 'bottom',\n};\n\ntype State = {\n  index: number,\n  isSwiping: boolean,\n  loaded: Array<number>,\n  transitioningFromIndex: ?number,\n};\n\nclass MaterialTabView extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    // fix for https://github.com/react-native-community/react-native-tab-view/issues/312\n    initialLayout: Platform.select({\n      android: { width: 1, height: 0 },\n    }),\n    animationEnabled: true,\n    lazy: false,\n    optimizationsEnabled: false,\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    if (prevState.index === index) {\n      return null;\n    }\n\n    return {\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n      index,\n    };\n  }\n\n  state = {\n    index: 0,\n    isSwiping: false,\n    loaded: [this.props.navigation.state.index],\n    transitioningFromIndex: null,\n  };\n\n  _renderIcon = ({ focused, route, tintColor }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarIcon) {\n      return typeof options.tabBarIcon === 'function'\n        ? options.tabBarIcon({ tintColor, focused })\n        : options.tabBarIcon;\n    }\n\n    return null;\n  };\n\n  _renderTabBar = props => {\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    const tabBarVisible =\n      options.tabBarVisible == null ? true : options.tabBarVisible;\n\n    const {\n      tabBarComponent: TabBarComponent = MaterialTopTabBar,\n      tabBarPosition,\n      tabBarOptions,\n    } = this.props;\n\n    if (TabBarComponent === null || !tabBarVisible) {\n      return null;\n    }\n\n    return (\n      /* $FlowFixMe */\n      <TabBarComponent\n        {...tabBarOptions}\n        {...props}\n        tabBarPosition={tabBarPosition}\n        screenProps={this.props.screenProps}\n        navigation={this.props.navigation}\n        getLabelText={this.props.getLabelText}\n        getAccessibilityLabel={this.props.getAccessibilityLabel}\n        getTestID={this.props.getTestID}\n        renderIcon={this._renderIcon}\n        onTabPress={this.props.onTabPress}\n        onTabLongPress={this.props.onTabLongPress}\n      />\n    );\n  };\n\n  _renderPanPager = props => <PagerPan {...props} />;\n\n  _handleAnimationEnd = () => {\n    const { lazy } = this.props;\n\n    if (lazy) {\n      this.setState({\n        transitioningFromIndex: null,\n        isSwiping: false,\n      });\n    }\n  };\n\n  _handleSwipeStart = () => {\n    const { navigation, lazy } = this.props;\n\n    if (lazy) {\n      this.setState({\n        isSwiping: true,\n        loaded: [\n          ...new Set([\n            ...this.state.loaded,\n            Math.max(navigation.state.index - 1, 0),\n            Math.min(\n              navigation.state.index + 1,\n              navigation.state.routes.length - 1\n            ),\n          ]),\n        ],\n      });\n    }\n  };\n\n  _handleIndexChange = index => {\n    const { animationEnabled, navigation, onIndexChange, lazy } = this.props;\n\n    if (lazy && animationEnabled) {\n      this.setState({\n        transitioningFromIndex: navigation.state.index || 0,\n      });\n    }\n\n    onIndexChange(index);\n  };\n\n  _mustBeVisible = ({ index, focused }) => {\n    const { animationEnabled, navigation } = this.props;\n    const { isSwiping, transitioningFromIndex } = this.state;\n\n    if (isSwiping) {\n      const isSibling =\n        navigation.state.index === index - 1 ||\n        navigation.state.index === index + 1;\n\n      if (isSibling) {\n        return true;\n      }\n    }\n\n    // The previous tab should remain visible while transitioning\n    if (animationEnabled && transitioningFromIndex === index) {\n      return true;\n    }\n\n    return focused;\n  };\n\n  _renderScene = ({ route }) => {\n    const { renderScene, descriptors, lazy, optimizationsEnabled } = this.props;\n\n    if (lazy) {\n      const { loaded } = this.state;\n      const { routes } = this.props.navigation.state;\n      const index = routes.findIndex(({ key }) => key === route.key);\n      const { navigation } = descriptors[route.key];\n\n      const mustBeVisible = this._mustBeVisible({\n        index,\n        focused: navigation.isFocused(),\n      });\n\n      if (!loaded.includes(index) && !mustBeVisible) {\n        return <View />;\n      }\n\n      if (optimizationsEnabled) {\n        return (\n          <ResourceSavingScene isVisible={mustBeVisible}>\n            {renderScene({ route })}\n          </ResourceSavingScene>\n        );\n      }\n    }\n\n    return renderScene({ route });\n  };\n\n  render() {\n    const {\n      navigation,\n      animationEnabled,\n      // eslint-disable-next-line no-unused-vars\n      renderScene,\n      // eslint-disable-next-line no-unused-vars\n      onIndexChange,\n      ...rest\n    } = this.props;\n\n    let renderPager = rest.renderPager;\n\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    let swipeEnabled =\n      options.swipeEnabled == null\n        ? this.props.swipeEnabled\n        : options.swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    if (animationEnabled === false && swipeEnabled === false) {\n      renderPager = this._renderPanPager;\n    }\n\n    return (\n      <TabView\n        {...rest}\n        navigationState={navigation.state}\n        animationEnabled={animationEnabled}\n        swipeEnabled={swipeEnabled}\n        onAnimationEnd={this._handleAnimationEnd}\n        onIndexChange={this._handleIndexChange}\n        onSwipeStart={this._handleSwipeStart}\n        renderPager={renderPager}\n        renderTabBar={this._renderTabBar}\n        renderScene={\n          /* $FlowFixMe */\n          this._renderScene\n        }\n      />\n    );\n  }\n}\n\npolyfill(MaterialTabView);\n\nexport default createTabNavigator(MaterialTabView);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}